<%- include("../../views/partials/user/header") %>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
                font-family: 'Segoe UI', Arial, sans-serif;
            }
    
            body {
                background-color: #ffffff;
                margin: 0;
                padding: 2rem 0;
            }
    
            .cart-container {
                max-width: 1200px;
                margin: 6rem auto;
                display: flex;
                gap: 2rem;
                padding: 0 2rem;
            }
    
            .cart-items {
                flex: 1;
                background: white;
                border-radius: 12px;
                box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
                padding: 2rem;
            }
    
            .price-summary {
                width: 300px;
                background: white;
                border-radius: 12px;
                box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
                padding: 1.5rem;
                height: fit-content;
            }
    
            .cart-header {
                border-bottom: 2px solid #eee;
                padding-bottom: 1rem;
                margin-bottom: 2rem;
            }
    
            .cart-header h1 {
                font-size: 2rem;
                color: #1a1a1a;
                letter-spacing: -0.5px;
            }
    
            .cart-item {
                display: flex;
                gap: 1.5rem;
                padding: 1.5rem;
                border-bottom: 1px solid #eee;
                position: relative;
                transition: transform 0.3s ease, box-shadow 0.3s ease;
                animation: itemEntrance 0.6s ease-out;
            }
    
            @keyframes itemEntrance {
                from { opacity: 0; transform: translateY(20px); }
                to { opacity: 1; transform: translateY(0); }
            }
    
            .cart-item:hover {
                transform: translateY(-3px);
                box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
            }
    
            .item-image {
                width: 120px;
                height: 120px;
                object-fit: contain;
                border-radius: 8px;
                background: #fff8e5;
                padding: 0.5rem;
            }
    
            .item-details {
                flex: 1;
                position: relative;
            }
    
            .item-title {
                font-size: 1.1rem;
                color: #1a1a1a;
                margin-bottom: 0.5rem;
                font-weight: 600;
            }
    
            .item-price {
                font-weight: bold;
                color: #1a1a1a;
                margin-bottom: 1rem;
            }
    
            .quantity-controls {
                display: flex;
                align-items: center;
                gap: 0.5rem;
                margin-top: 1rem;
            }
    
            .quantity-btn {
                width: 32px;
                height: 32px;
                border: 1px solid #ddd;
                background: none;
                border-radius: 50%;
                cursor: pointer;
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                justify-content: center;
                font-weight: 500;
            }
    
            .quantity-btn:hover {
                background: #fff8e5;
                border-color: #FFD700;
                transform: scale(1.08);
            }
    
            .remove-item {
                color: #1a1a1a;
                text-decoration: none;
                font-size: 0.9rem;
                display: flex;
                align-items: center;
                gap: 0.5rem;
                padding: 0.6rem 1rem;
                border: 1px solid #1a1a1a;
                border-radius: 24px;
                transition: all 0.3s ease;
                background: white;
                position: absolute;
                right: 0;
                bottom: 0;
            }
    
            .remove-item:hover {
                background: #1a1a1a;
                color: #FFD700;
                transform: translateY(-1px);
            }
    
            .price-row {
                display: flex;
                justify-content: space-between;
                margin-bottom: 1rem;
                color: #666;
            }
    
            .total-amount {
                font-size: 1.2rem;
                font-weight: bold;
                color: #1a1a1a;
                border-top: 1px solid #eee;
                padding-top: 1rem;
                margin-top: 1rem;
            }
    
            .checkout-btn {
                width: 100%;
                padding: 1rem;
                background: #FFD700;
                color: #1a1a1a;
                border: none;
                border-radius: 8px;
                font-size: 1rem;
                cursor: pointer;
                transition: all 0.3s ease;
                font-weight: 600;
                letter-spacing: 0.5px;
            }
    
            .checkout-btn:hover {
                background: #e6c200;
                transform: translateY(-2px);
                box-shadow: 0 4px 16px rgba(255, 215, 0, 0.3);
            }
    
            .discount {
                color: #FFD700;
            }
    
            .delivery-charges {
                display: flex;
                justify-content: space-between;
            }
    
            .strikethrough {
                text-decoration: line-through;
                margin-right: 0.5rem;
                color: #999;
            }
    
            @media (max-width: 768px) {
                .cart-container {
                    flex-direction: column;
                }
                
                .price-summary {
                    width: 100%;
                }
    
                .cart-item {
                    flex-direction: column;
                    padding: 1rem;
                }
    
                .item-image {
                    width: 100%;
                    height: auto;
                    max-width: 200px;
                    margin: 0 auto;
                }
    
                .remove-item {
                    position: static;
                    margin-top: 1rem;
                    width: fit-content;
                }
            }
    
            .product-variants {
                margin: 0.5rem 0;
                font-size: 0.9rem;
                color: #666;
            }
    
            .variant-info {
                display: inline-block;
                margin-right: 1rem;
                padding: 0.2rem 0.5rem;
                background-color: #f5f5f5;
                border-radius: 4px;
            }
        </style>
    </head>
<body>
    <div class="cart-container">
        <div class="cart-items" >
            <div class="cart-header">
                <h1>Your Cart (<%= products.reduce((total, product) => total + parseInt(product.quantity), 0) %> Items)</h1>
            </div>

            <% products.forEach(product => { %>
                <!-- Inside the cart-items loop -->
<div class="cart-item" 
    data-productStock='<%= product.varient.count%>'
    data-product-id="<%= product._id %>" 
    data-product-price="<%= product.price %>"
    data-product-offer="<%= product.offer %>"
    data-product-stock="<%= product.count %>"
    data-product-size="<%= product.varient.size %>"
    data-product-color="<%= product.varient.color %>">
     
    <img src="<%= product.images[0] %>" alt="<%= product.name %>" class="item-image">
    <div class="item-details">
        <h2 class="item-title"><%= product.name %></h2>
        <p class="item-price">₹<%= product.price %></p>
        <div class="product-variants">
            <span class="variant-info">Size: <%= product.varient.size %></span>
            <span class="variant-info">Color: <%= product.varient.color %></span>
        </div>
        <div class="quantity-controls">
            <button class="quantity-btn minus">-</button>
            <span class="quantity"><%= product.quantity > product.varient.count ? product.varient.count : product.quantity %></span>
            <button class="quantity-btn plus">+</button>
        </div>
        <a href="cartremove/<%= product._id %>?size=<%= product.varient.size %>&color=<%= product.varient.color %>" class="remove-item">× Remove</a>
    </div>
</div>
            <% }) %>
        </div>

        <div class="price-summary">
            <%
            let totalWithoutOffers = 0;
            let discount = 0;
            let deliveryCharges = 0;
            let totalItems = 0;
        
            products.forEach(product => {
                const price = parseInt(product.price);
                const quantity = parseInt(product.quantity);
                const offer = product.offer || 0;
        
                totalWithoutOffers += price * quantity;
                totalItems += quantity;
        
                // Calculate discount
                if (offer > 0) {
                    discount += (price * (offer / 100)) * quantity;
                }
        
                // Calculate delivery charges
                const discountedPricePerItem = price * (1 - (offer / 100));
                if (discountedPricePerItem * quantity < 500) {
                    deliveryCharges += 40 * quantity;
                }
            });
        
            const totalAmount = (totalWithoutOffers - discount) + deliveryCharges;
        %>
    <h2 style="margin-bottom: 1.5rem; font-size: 1.2rem; color: #1a1a1a;">Price Details</h2>

    <div class="price-row">
        <span>Price (<%= totalItems %> items)</span>
        <span>₹<%= totalWithoutOffers.toLocaleString() %></span>
    </div>

    <div class="price-row">
        <span>Discount</span>
        <span class="discount">− ₹<%= Math.round(discount).toLocaleString() %></span>
    </div>

    <div class="price-row">
        <span>Delivery Charges</span>
        <span>₹<%= deliveryCharges.toLocaleString() %></span>
    </div>

    <div class="price-row total-amount">
        <span>Total Amount</span>
        <span>₹<%= Math.round(totalAmount).toLocaleString() %></span>
    </div>

    <button class="checkout-btn">Secure Checkout</button>
</div>
    </div>
</body>
<script>
    // Get user ID from EJS
    const userId = '<%= userid %>'; 
    // Add event listeners to quantity buttons
    document.querySelectorAll('.quantity-btn').forEach(button => {
        button.addEventListener('click', async (e) => {
            const isPlus = e.target.classList.contains('plus');
            const cartItem = e.target.closest('.cart-item');
            const productId = cartItem.dataset.productId;
            const quantitySpan = cartItem.querySelector('.quantity');
            let quantity = parseInt(quantitySpan.textContent);
            const stock = parseInt(cartItem.dataset.productstock);
          
            
            
            // Extract variant information
            const variantInfo = cartItem.querySelectorAll('.variant-info');
            const varient = {
                size: variantInfo[0].textContent.split(': ')[1],
                color: variantInfo[1].textContent.split(': ')[1]
            };

            // Optimistic UI update
            if (isPlus && quantity < 5 && quantity !== stock) {
                quantity += 1;
            } else if (!isPlus && quantity > 1) {
                quantity -= 1;
            } else {
                return; // Stop if already at min or max
            }
            quantitySpan.textContent = quantity;

            try {
                const response = await fetch('/user/updatecart', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        productid: productId, 
                        userid: userId, 
                        quantity,
                        varient // Include variant information in the request
                    })
                });

                if (!response.ok) throw new Error('Update failed');
                
                calculateTotals();
                updateItemCount();
            } catch (error) {
                console.error(error);
                quantitySpan.textContent = parseInt(quantitySpan.textContent) + (isPlus ? -1 : 1);
                alert('Failed to update. Please try again.');
            }
        });
    });

    // Calculate new totals
    function calculateTotals() {
    let totalWithoutOffers = 0;
    let discount = 0;
    let deliveryCharges = 0;
    let totalItems = 0;

    document.querySelectorAll('.cart-item').forEach(item => {
        const price = parseFloat(item.dataset.productPrice);
        const offer = parseFloat(item.dataset.productOffer) || 0;
        const quantity = parseInt(item.querySelector('.quantity').textContent);

        totalWithoutOffers += price * quantity;
        totalItems += quantity;

        // Calculate discount
        if (offer > 0) {
            discount += (price * (offer / 100)) * quantity;
        }

        // Calculate delivery charges
        const discountedPricePerItem = price * (1 - (offer / 100));
        if (discountedPricePerItem * quantity < 500) {
            deliveryCharges += 40 * quantity;
        }
    });

    const totalAmount = (totalWithoutOffers - discount) + deliveryCharges;

    // Update DOM elements
    const priceRows = document.querySelectorAll('.price-summary .price-row');
    priceRows[0].querySelector('span:last-child').textContent = `₹${totalWithoutOffers.toLocaleString()}`;
    priceRows[1].querySelector('.discount').textContent = `− ₹${Math.round(discount).toLocaleString()}`;
    priceRows[2].querySelector('span:last-child').textContent = `₹${deliveryCharges.toLocaleString()}`;
    document.querySelector('.total-amount span:last-child').textContent = `₹${Math.round(totalAmount).toLocaleString()}`;

    // Update item count
    document.querySelector('.cart-header h1').textContent = `Your Cart (${totalItems} Items)`;
}
    // Update item count in header
    function updateItemCount() {
        const totalItems = Array.from(document.querySelectorAll('.quantity'))
            .reduce((sum, span) => sum + parseInt(span.textContent), 0);
        document.querySelector('.cart-header h1').textContent = `Your Cart (${totalItems} Items)`;
    }
    // Checkout button handler
    document.querySelector('.checkout-btn').addEventListener('click', async () => {
        const cartItems = {};
        
        // Collect all product IDs and quantities
        let counter = 1;
        document.querySelectorAll('.cart-item').forEach(item => {
            const productId = item.dataset.productId;
            const quantity = parseInt(item.querySelector('.quantity').textContent);
            const size = item.dataset.productSize;
            const color = item.dataset.productColor;
            
            cartItems[counter] = {
                productId: productId,
                quantity: quantity,
                size: size,
                color: color
            };
            counter++;
        });
   
       
        try {
            const response = await fetch('/user/checkout', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(cartItems)
            });

            const html = await response.text();
            document.open();
            document.write(html);
            document.close();
            
        } catch (error) {
            console.error('Checkout error:', error);
            alert('Checkout failed. Please try again.');
        }
    });
</script>
</html>