<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Enhanced Checkout</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
        <style>
             * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
                font-family: 'Segoe UI', sans-serif;
            }
    
            body {
                background: #f5f6f8;
                padding: 2rem;
            }
    
            .checkout-container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                border-radius: 12px;
                box-shadow: 0 2px 15px rgba(0,0,0,0.1);
                padding: 2rem;
                position: relative;
            }
    
            .progress-bar {
                display: flex;
                justify-content: space-between;
                margin-bottom: 3rem;
                position: relative;
            }
    
            .progress-line {
                position: absolute;
                top: 50%;
                left: 5%;
                right: 5%;
                height: 2px;
                background: #ddd;
                z-index: 1;
            }
    
            .progress-step {
                width: 30%;
                text-align: center;
                padding: 1rem;
                position: relative;
                z-index: 2;
                background: white;
                color: #666;
            }
    
            .active-step {
                color: #2874f0;
                font-weight: 500;
            }
    
            .section {
                display: none;
                animation: fadeIn 0.3s ease;
            }
    
            .active-section {
                display: block;
            }
    
            .address-card {
                border: 1px solid #e0e0e0;
                padding: 1.5rem;
                margin-bottom: 1rem;
                border-radius: 8px;
                cursor: pointer;
                transition: all 0.2s ease;
                position: relative;
            }
    
            .selected-address {
                border-color: #2874f0;
                background: #f0f8ff;
            }
    
            .add-address-modal {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0,0,0,0.5);
                z-index: 1000;
            }
    
            .modal-content {
                background: white;
                width: 500px;
                padding: 2rem;
                position: absolute;
                left: 50%;
                top: 50%;
                transform: translate(-50%, -50%);
                border-radius: 8px;
                animation: modalFade 0.3s ease;
            }
    
            .payment-option {
                margin-bottom: 1rem;
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                padding: 1rem;
                cursor: pointer;
            }
    
            .payment-fields {
                max-height: 0;
                overflow: hidden;
                transition: all 0.3s ease-out;
                padding-left: 0;
            }
    
            .payment-option.active {
                border-color: #2874f0;
                background: #f0f8ff;
            }
    
            .payment-option.active .payment-fields {
                max-height: 200px;
                padding: 1rem 0;
                margin-top: 1rem;
            }
    
            .order-items {
                margin-bottom: 2rem;
            }
    
            .order-item {
                display: flex;
                align-items: center;
                padding: 1rem;
                border-bottom: 1px solid #eee;
            }
    
            .product-image {
                width: 80px;
                height: 80px;
                object-fit: cover;
                margin-right: 1.5rem;
                border-radius: 4px;
            }
    
            .order-summary {
                background: #f8f9fa;
                padding: 1.5rem;
                border-radius: 8px;
            }
    
            .summary-item {
                display: flex;
                justify-content: space-between;
                margin-bottom: 0.8rem;
                color: #666;
            }
    
            .total {
                font-weight: bold;
                color: #2c3e50;
                font-size: 1.2rem;
            }
    
            .action-btns {
                margin-top: 2rem;
                display: flex;
                gap: 1rem;
                justify-content: flex-end;
            }
    
            .btn {
                padding: 12px 24px;
                background: #2874f0;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                display: flex;
                align-items: center;
                gap: 8px;
                transition: background 0.2s;
            }
    
            .btn:hover {
                background: #1a5bbf;
            }
    
            @keyframes fadeIn {
                from { opacity: 0; transform: translateY(10px); }
                to { opacity: 1; transform: translateY(0); }
            }
    
            @keyframes modalFade {
                from { opacity: 0; transform: translate(-50%, -40%); }
                to { opacity: 1; transform: translate(-50%, -50%); }
            }
               /* Improved address card styling */
        .address-card {
            position: relative;
            padding: 1.5rem;
            margin: 1rem 0;
            background: #f9f9f9;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
    
        .address-card p {
            margin: 0;
            line-height: 1.8;
            color: #444;
            font-size: 0.95rem;
        }
    
        .address-actions {
            position: absolute;
            top: 1rem;
            right: 1rem;
            display: flex;
            gap: 0.7rem;
        }
    
        .btn-icon {
            background: none;
            border: none;
            color: var(--secondary);
            cursor: pointer;
            padding: 0.3rem;
            transition: color 0.3s ease;
        }
    
        .btn-icon:hover {
            color: var(--primary);
        }
    
        /* Responsive grid adjustments */
        .address-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
    
            .form-input {
                width: 100%;
                padding: 12px;
                border: 1px solid #ddd;
                border-radius: 6px;
                margin-top: 8px;
                font-size: 14px;
                transition: all 0.3s ease;
            }
    
            .form-input:focus {
                border-color: #2874f0;
                box-shadow: 0 0 0 3px rgba(40, 116, 240, 0.1);
                outline: none;
            }
    
            .form-group {
                margin-bottom: 1.5rem;
            }
    
            .half-width {
                width: calc(50% - 0.5rem);
            }
    
            .full-width {
                width: 100%;
            }
    
            .edit-icon {
                position: absolute;
                top: 1rem;
                right: 1rem;
                color: #2874f0;
                cursor: pointer;
                background: rgba(255,255,255,0.9);
                padding: 5px;
                border-radius: 50%;
            }
    
            .payment-fields input {
                margin-top: 1rem;
            }
    
            .modal-content h2 {
                margin-bottom: 2rem;
                color: #2c3e50;
            }
    
            .address-card {
                position: relative;
                padding-right: 2.5rem;
            }
    
            /* Enhanced payment option styling */
            .payment-option {
                position: relative;
            }
    
            .payment-option label {
                display: flex;
                align-items: center;
                gap: 1rem;
                cursor: pointer;
            }
    
            .payment-option input[type="radio"] {
                width: 20px;
                height: 20px;
                accent-color: #2874f0;
            }
            .error-message {
    color: #dc3545;
    font-size: 0.875rem;
    margin-top: 0.25rem;
    display: none;
}

.form-group.invalid .form-input {
    border-color: #dc3545;
}

.form-group.invalid .error-message {
    display: block;
}
.quantity-control {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .qty-btn {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        border: 1px solid #2874f0;
        background: white;
        color: #2874f0;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .qty-btn:hover {
        background: #2874f0;
        color: white;
    }

    .qty-input {
        width: 50px;
        text-align: center;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 6px;
        font-size: 14px;
        -moz-appearance: textfield;
    }

    .qty-input::-webkit-outer-spin-button,
    .qty-input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
    .payment-error {
    color: #dc3545;
    font-size: 0.9rem;
    margin-top: 0.5rem;
    display: none;
}
</style>
    </head>
<body>
    <div class="checkout-container">
        <!-- Address Section -->
        <div class="section active-section" id="addressSection">
            <h2>Select Delivery Address</h2>
            <% addresses.forEach((address, index) => { %>
                <div class="address-card <%= index === 0 ? 'selected-address' : '' %>" 
                     data-address-id="<%= address.id %>" 
                     onclick="selectAddress(this, '<%= address._id %>')">
                    <i class="fas fa-edit edit-icon" onclick="showEditModal(event, '<%= address._id %>')"></i>
                    <h3><%= address.street %></h3>
                    <p><%= address.city %>, <%= address.state %></p>
                    <p><%= address.country %>, <%= address.postalCode %></p>
                    <p>Phone: <%= address.phone %></p>
                </div>
            <% }); %>
            <button class="btn" onclick="showAddressModal()">
                <i class="fas fa-plus"></i>
                Add New Address
            </button>
            <div class="action-btns">
                <button class="btn" onclick="nextSection('paymentSection')">
                    <i class="fas fa-arrow-right"></i>
                    Continue
                </button>
            </div>
        </div>

        

        <!-- Review Section -->
        <div class="section" id="reviewSection">
            <h2>Review Your Order</h2>
            <div class="order-items">
                <% products.forEach(product => { %>
                    <div class="order-item">
                        <img src="<%= product.image0 %>" class="product-image" alt="<%= product.name %>">
                        <div>
                            <h3><%= product.name %></h3>
                            <p>Color: <%= product.colors %></p>
                            <div class="quantity-control">
                                <span>Quantity:</span>
                                <button class="qty-btn minus" onclick="adjustQuantity(this, -1)">-</button>
                                <input type="number" class="qty-input" 
                                       value="1" 
                                       min="1" 
                                       data-price="<%= product.price %>"
                                       data-product-id="<%= product._id %>"
                                       onchange="updateQuantity(this)">
                                <button class="qty-btn plus" onclick="adjustQuantity(this, 1)">+</button>
                            </div>
                            <p>₹<span class="item-total"><%= product.price %></span></p>
                        </div>
                    </div>
                <% }); %>
            </div>
            <div class="order-summary">
                <div class="summary-item">
                    <span>Subtotal (<span class="item-count"><%= products.length %></span> items):</span>
                    <span>₹<span class="subtotal-value"><%= subtotal %></span></span>
                </div>
                <div class="summary-item">
                    <span>Delivery Fee:</span>
                    <span>₹<span class="delivery-fee"><%= deliveryFee %></span></span>
                </div>
                <div class="summary-item">
                    <span>Discount:</span>
                    <span>-₹<span class="discount-value"><%= discount %></span></span>
                </div>
                <div class="summary-item total">
                    <span>Total Amount:</span>
                    <span>₹<span class="total-value"><%= total %></span></span>
                </div>
            </div>

            <div class="action-btns">
                <button class="btn" onclick="prevSection('paymentSection')">
                    <i class="fas fa-arrow-left"></i>
                    Back
                </button>
                <button class="btn" onclick="placeOrder()">
                    <i class="fas fa-check"></i>
                    Place Order
                </button>
            </div>
        </div>
        <!-- Update your payment section with these corrected payment options -->
<!-- Payment Section -->
<div class="section" id="paymentSection">
    <h2>Select Payment Method</h2>
    <div class="payment-option" onclick="togglePayment(this)">
        <label>
            <input type="radio" name="payment" value="cod">
            <i class="fas fa-money-bill-wave"></i>
            Cash on Delivery
        </label>
    </div>
    
    <div class="payment-option" onclick="togglePayment(this)">
        <label>
            <input type="radio" name="payment" value="card">
            <i class="fas fa-credit-card"></i>
            Credit/Debit Card
        </label>
        <div class="payment-fields">
            <input type="text" placeholder="Card Number" class="form-input full-width">
            <div style="display: flex; gap: 1rem; margin-top: 1rem;">
                <input type="text" placeholder="MM/YY" class="form-input half-width">
                <input type="text" placeholder="CVV" class="form-input half-width">
            </div>
        </div>
    </div>

    <div class="payment-option" onclick="togglePayment(this)">
        <label>
            <input type="radio" name="payment" value="upi">
            <i class="fas fa-mobile-alt"></i>
            UPI Payment
        </label>
        <div class="payment-fields">
            <input type="text" placeholder="UPI ID" class="form-input full-width">
        </div>
    </div>

    <!-- Add error message and action buttons -->
    <div class="payment-error" id="paymentError">
        Please select a payment method
    </div>

    <div class="action-btns">
        <button class="btn" onclick="prevSection('addressSection')">
            <i class="fas fa-arrow-left"></i>
            Back
        </button>
        <button class="btn" onclick="nextSection('reviewSection')">
            <i class="fas fa-arrow-right"></i>
            Continue
        </button>
    </div>
</div>
        <!-- Address Modal -->
        <div class="add-address-modal" id="addressModal">
            <div class="modal-content">
                <h2>Add New Address</h2>
                <form id="addressForm" >
                    <div class="form-group">
                        <input type="text" name="street" placeholder="Street Address" class="form-input" required>
                    </div>
                    <div class="form-group">
                        <input type="text" name="city" placeholder="City" class="form-input" required>
                    </div>
                    <div class="form-group">
                        <input type="text" name="state" placeholder="State" class="form-input" required>
                    </div>
                    <div class="form-group">
                        <input type="text" name="country" placeholder="Country" class="form-input" required>
                    </div>
                    <div class="form-group">
                        <input type="text" name="postalCode" placeholder="Postal Code" class="form-input" required>
                    </div>
                    <div class="form-group">
                        <input type="tel" name="phone" placeholder="Phone Number" class="form-input" required>
                    </div>
                    <div class="action-btns">
                        <button type="button" class="btn" onclick="closeAddressModal()">
                            <i class="fas fa-times"></i>
                            Cancel
                        </button>
                        <button type="submit" class="btn">
                            <i class="fas fa-save"></i>
                            Save Address
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        let selectedAddressId = '<%= addresses[0]?.id %>'; // Initialize with first address ID

function selectAddress(element,adresss) {
    // Remove selection from all addresses
    document.querySelectorAll('.address-card').forEach(card => {
        card.classList.remove('selected-address');
    });
    
    // Add selection to clicked address
    element.classList.add('selected-address');
    
    // Update selected address ID
    selectedAddressId = adresss;
    console.log('Selected Address ID:', selectedAddressId); // For testing
}

// Modify edit function to handle correct address
function showEditModal(event, addressId) {
    event.stopPropagation(); // Prevent address selection when clicking edit
    // Your edit modal logic here, using addressId
    document.getElementById('addressModal').style.display = 'block';
}


// Add these new functions
        function showEditModal() {
            // You can add logic to populate existing address data here
            document.getElementById('addressModal').style.display = 'block';
        }

        // Modified togglePayment function
        function togglePayment(option) {
    const allOptions = document.querySelectorAll('.payment-option');
    allOptions.forEach(opt => {
        opt.classList.remove('active');
        const fields = opt.querySelector('.payment-fields');
        if (fields) { // Add null check here
            fields.style.maxHeight = '0';
        }
    });
    
    option.classList.add('active');
    const fields = option.querySelector('.payment-fields');
    if (fields) { // Add null check here
        fields.style.maxHeight = fields.scrollHeight + 'px';
    }
    
    // Capture payment method
    selectedPaymentMethod = option.querySelector('input').value;
    document.getElementById('paymentError').style.display = 'none';
}
        // Update existing closeAddressModal function
        function closeAddressModal() {
            document.getElementById('addressModal').style.display = 'none';
            // Reset form if needed
            document.getElementById('addressForm').reset();
        }

        let currentSection = 'addressSection';

        function nextSection(nextId) {
    // Validate payment section before proceeding to review
    if (currentSection === 'paymentSection' && nextId === 'reviewSection') {
        const paymentSelected = document.querySelector('input[name="payment"]:checked');
        if (!paymentSelected) {
            document.getElementById('paymentError').style.display = 'block';
            return;
        }
    }

    document.getElementById(currentSection).classList.remove('active-section');
    document.getElementById(nextId).classList.add('active-section');
    updateProgress(nextId);
    currentSection = nextId;
    
    // Clear payment error when leaving section
    if (currentSection !== 'paymentSection') {
        document.getElementById('paymentError').style.display = 'none';
    }
}

function togglePayment(option) {
    const allOptions = document.querySelectorAll('.payment-option');
    allOptions.forEach(opt => {
        opt.classList.remove('active');
        opt.querySelector('.payment-fields').style.maxHeight = '0';
    });
    
    option.classList.add('active');
    const fields = option.querySelector('.payment-fields');
    fields.style.maxHeight = fields.scrollHeight + 'px';
    
    // Clear error when payment method is selected
    document.getElementById('paymentError').style.display = 'none';
}
function prevSection(prevId) {
    document.getElementById(currentSection).classList.remove('active-section');
    document.getElementById(prevId).classList.add('active-section');
    updateProgress(prevId);
    currentSection = prevId;
}

function updateProgress(sectionId) {
    const steps = document.querySelectorAll('.progress-step');
    steps.forEach((step, index) => {
        step.classList.remove('active-step');
        if((sectionId === 'addressSection' && index === 0) ||
           (sectionId === 'paymentSection' && index === 1) ||
           (sectionId === 'reviewSection' && index === 2)) {
            step.classList.add('active-step');
        }
    });
}

function showAddressModal() {
    document.getElementById('addressModal').style.display = 'block';
}

function closeAddressModal() {
    document.getElementById('addressModal').style.display = 'none';
}
let selectedPaymentMethod = null;
function togglePayment(option) {
    const allOptions = document.querySelectorAll('.payment-option');
    allOptions.forEach(opt => opt.classList.remove('active'));
    option.classList.add('active');
    
    
    
    // Capture payment method
    selectedPaymentMethod = option.querySelector('input').value;
    document.getElementById('paymentError').style.display = 'none';
}

async function placeOrder() {
   
    
    // Validate required information
    if (!selectedAddressId) {
        alert('Please select a delivery address!');
        return;
    }
    
    if (!selectedPaymentMethod) {
        document.getElementById('paymentError').style.display = 'block';
        return;
    }

    // Collect product data
    const products = Array.from(document.querySelectorAll('.order-item')).map(item => {
        return {
            productId: item.querySelector('.qty-input').dataset.productId,
            quantity: parseInt(item.querySelector('.qty-input').value),
            price: parseFloat(item.querySelector('.qty-input').dataset.price)
        };
    });

    // Get totals
    const totalAmount = parseFloat(document.querySelector('.total-value').textContent);
    const subtotal = parseFloat(document.querySelector('.subtotal-value').textContent);
    const deliveryFee = parseFloat(document.querySelector('.delivery-fee').textContent);
    const discount = parseFloat(document.querySelector('.discount-value').textContent);
    try {
    const response = await fetch('/user/placeOrder', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            addressId: selectedAddressId,
            paymentMethod: selectedPaymentMethod,
            products: products,
            totals: {
                subtotal: subtotal,
                delivery: deliveryFee,
                discount: discount,
                total: totalAmount
            }
        })
    });

    if (response.ok) {
        const html = await response.text(); // Get the full HTML response
        document.documentElement.innerHTML = html; // Replace entire page content
    } else {
        const result = await response.json();
        alert('Order failed: ' + (result.error || 'Unknown error'));
    }
} catch (error) {
    console.error('Error:', error);
    alert('Failed to place order. Please try again.');
}

}
function saveAddress(e) {
    e.preventDefault();
    closeAddressModal();
    // Add address saving logic here
}

// Close modal when clicking outside
window.onclick = function(event) {
    const modal = document.getElementById('addressModal');
    if(event.target == modal) {
        closeAddressModal();
    }
}

document.getElementById('addressForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData.entries());

    try {
        const response = await fetch('/user/adresss', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
            credentials: 'include' // Include cookies for session
        });

        const result = await response.json();
        
        if (result.success) {
            // Add the new address to the DOM
            const addressContainer = document.querySelector('#addressSection');
            const newAddress = createAddressElement(result.address);
            addressContainer.insertBefore(newAddress, addressContainer.querySelector('.btn'));
            closeAddressModal();
        } else {
            alert('Error adding address: ' + (result.error || 'Unknown error'));
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Failed to add address. Please try again.');
    }
});
function createAddressElement(address) {
    const div = document.createElement('div');
    div.className = 'address-card';
    div.dataset.addressId = address.id;
    div.innerHTML = `
        <i class="fas fa-edit edit-icon" onclick="showEditModal(event, '${address.id}')"></i>
        <h3>${address.street}</h3>
        <p>${address.city}, ${address.state}</p>
        <p>${address.country}, ${address.postalCode}</p>
        <p>Phone: ${address.phone}</p>
    `;
    div.onclick = () => selectAddress(div);
    return div;
}
function adjustQuantity(button, change) {
        const input = button.parentElement.querySelector('.qty-input');
        const newValue = parseInt(input.value) + change;
        input.value = newValue < 1 ? 1 : newValue;
        updateQuantity(input);
    }

    function updateQuantity(input) {
        const price = parseFloat(input.dataset.price);
        const quantity = parseInt(input.value);
        const itemTotal = input.parentElement.parentElement.querySelector('.item-total');
        itemTotal.textContent = (price * quantity).toFixed(2);
        
        updateOrderSummary();
    }

    function updateOrderSummary() {
    let subtotal = 0;
    document.querySelectorAll('.qty-input').forEach(input => {
        subtotal += parseFloat(input.dataset.price) * parseInt(input.value);
    });

    // Get values from server-side variables
    const deliveryFee = <%= deliveryFee %>;
    const discount = <%= discount %>;
    
    // Update displayed values
    document.querySelector('.subtotal-value').textContent = subtotal.toFixed(2);
    document.querySelector('.delivery-fee').textContent = deliveryFee.toFixed(2);
    document.querySelector('.discount-value').textContent = discount.toFixed(2);
    
    // Calculate total
    const total = subtotal + deliveryFee - discount;
    document.querySelector('.total-value').textContent = total.toFixed(2);
}
    </script>
</body>
</html>







