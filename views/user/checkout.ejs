<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Enhanced Checkout</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
        <style>
             * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
                font-family: 'Segoe UI', sans-serif;
            }
    
            body {
                background: #f5f6f8;
                padding: 2rem;
            }
    
            .checkout-container {
                max-width: 100%;
                padding: 1rem;
                margin: 0;
            }
    
            .checkout-grid {
                display: grid;
                grid-template-columns: 1fr 500px;
                gap: 1.5rem;
                max-width: 100%;
            }
    
            .checkout-left {
                display: flex;
                flex-direction: column;
                gap: 1.5rem;
                width: 100%;
                min-width: 0;
            }
    
            .checkout-right {
                position: sticky;
                top: 2rem;
                height: fit-content;
                width: 500px;
            }
    
            .checkout-section {
                width: 100%;
                background: white;
                border-radius: 12px;
                box-shadow: 0 2px 15px rgba(0,0,0,0.1);
                padding: 1.5rem;
                margin: 0;
            }
    
            .checkout-section h2 {
                margin-bottom: 1.5rem;
                color: #2c3e50;
                font-size: 1.5rem;
            }
    
            .address-card {
                border: 1px solid #e0e0e0;
                padding: 1.5rem;
                margin-bottom: 1rem;
                border-radius: 8px;
                cursor: pointer;
                transition: all 0.2s ease;
                position: relative;
            }
    
            .selected-address {
                border-color: #2874f0;
                background: #f0f8ff;
            }
    
            .add-address-modal {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0,0,0,0.5);
                z-index: 1000;
            }
    
            .modal-content {
                background: white;
                width: 500px;
                padding: 2rem;
                position: absolute;
                left: 50%;
                top: 50%;
                transform: translate(-50%, -50%);
                border-radius: 8px;
                animation: modalFade 0.3s ease;
            }
    
            .payment-option {
                margin-bottom: 1rem;
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                padding: 1rem;
                cursor: pointer;
            }
    
            .payment-fields {
                max-height: 0;
                overflow: hidden;
                transition: all 0.3s ease-out;
                padding-left: 0;
            }
    
            .payment-option.active {
                border-color: #2874f0;
                background: #f0f8ff;
            }
    
            .payment-option.active .payment-fields {
                max-height: 200px;
                padding: 1rem 0;
                margin-top: 1rem;
            }
    
            .order-items {
                margin-bottom: 2rem;
            }
    
            .order-item {
                display: flex;
                gap: 1.8rem;
                padding: 1.8rem;
                border-bottom: 1px solid #eee;
                position: relative;
            }
    
            .product-image {
                width: 120px;
                height: 120px;
                object-fit: cover;
                margin-right: 1.5rem;
                border-radius: 8px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            }
    
            .order-summary {
                background: #f8f9fa;
                padding: 1.5rem;
                border-radius: 8px;
            }
    
            .summary-item {
                display: flex;
                justify-content: space-between;
                padding: 0.8rem 0;
                color: #2c3e50;
                font-size: 1rem;
                border-bottom: 1px solid #eee;
            }
    
            .summary-item:last-child {
                border-bottom: none;
            }
    
            .summary-item.total {
                font-size: 1.2rem;
                font-weight: 600;
                color: #2c3e50;
                border-top: 2px solid #eee;
                margin-top: 0.5rem;
                padding-top: 1rem;
                border-bottom: none;
            }
    
            .amount {
                font-weight: 500;
                color: #2c3e50;
            }
    
            .action-btns {
                margin-top: 2rem;
                display: flex;
                gap: 1rem;
                justify-content: flex-end;
            }
    
            .btn {
                padding: 12px 24px;
                background: #2874f0;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                display: flex;
                align-items: center;
                gap: 8px;
                transition: background 0.2s;
            }
    
            .btn:hover {
                background: #1a5bbf;
            }
    
            @keyframes fadeIn {
                from { opacity: 0; transform: translateY(10px); }
                to { opacity: 1; transform: translateY(0); }
            }
    
            @keyframes modalFade {
                from { opacity: 0; transform: translate(-50%, -40%); }
                to { opacity: 1; transform: translate(-50%, -50%); }
            }
               /* Improved address card styling */
        .address-card {
            position: relative;
            padding: 1.5rem;
            margin: 1rem 0;
            background: #f9f9f9;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
    
        .address-card p {
            margin: 0;
            line-height: 1.8;
            color: #444;
            font-size: 0.95rem;
        }
    
        .address-actions {
            position: absolute;
            top: 1rem;
            right: 1rem;
            display: flex;
            gap: 0.7rem;
        }
    
        .btn-icon {
            background: none;
            border: none;
            color: var(--secondary);
            cursor: pointer;
            padding: 0.3rem;
            transition: color 0.3s ease;
        }
    
        .btn-icon:hover {
            color: var(--primary);
        }
    
        /* Responsive grid adjustments */
        .address-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
    
            .form-input {
                width: 100%;
                padding: 12px;
                border: 1px solid #ddd;
                border-radius: 6px;
                margin-top: 8px;
                font-size: 14px;
                transition: all 0.3s ease;
            }
    
            .form-input:focus {
                border-color: #2874f0;
                box-shadow: 0 0 0 3px rgba(40, 116, 240, 0.1);
                outline: none;
            }
    
            .form-group {
                margin-bottom: 1.5rem;
            }
    
            .half-width {
                width: calc(50% - 0.5rem);
            }
    
            .full-width {
                width: 100%;
            }
    
            .edit-icon {
                position: absolute;
                top: 1rem;
                right: 1rem;
                color: #2874f0;
                cursor: pointer;
                background: rgba(255,255,255,0.9);
                padding: 5px;
                border-radius: 50%;
            }
    
            .payment-fields input {
                margin-top: 1rem;
            }
    
            .modal-content h2 {
                margin-bottom: 2rem;
                color: #2c3e50;
            }
    
            .address-card {
                position: relative;
                padding-right: 2.5rem;
            }
    
            /* Enhanced payment option styling */
            .payment-option {
                position: relative;
            }
    
            .payment-option label {
                display: flex;
                align-items: center;
                gap: 1rem;
                cursor: pointer;
            }
    
            .payment-option input[type="radio"] {
                width: 20px;
                height: 20px;
                accent-color: #2874f0;
            }
            .error-message {
    color: #dc3545;
    font-size: 0.875rem;
    margin-top: 0.25rem;
    display: none;
}

.form-group.invalid .form-input {
    border-color: #dc3545;
}

.form-group.invalid .error-message {
    display: block;
}
.quantity-control {
    display: inline-flex;
    align-items: center;
    gap: 0.8rem;
    margin-top: 0.5rem;
    background: #f8f9fa;
    padding: 0.3rem 0.3rem 0.3rem 0.3rem;
    border-radius: 25px;
    width: fit-content;
}

.qty-btn {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    border: 1px solid #2874f0;
    background: white;
    color: #2874f0;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
}

.qty-btn:hover {
    background: #2874f0;
    color: white;
}

.qty-display {
    width: 32px;
    text-align: center;
    font-size: 1rem;
    font-weight: 500;
    color: #2c3e50;
    user-select: none;
}

/* Remove old input styles */
.qty-input::-webkit-outer-spin-button,
.qty-input::-webkit-inner-spin-button {
    display: none;
}

.payment-error {
    color: #dc3545;
    font-size: 0.9rem;
    margin-top: 0.5rem;
    display: none;
}

/* Adjust responsive layout */
@media (max-width: 1200px) {
    .checkout-container {
        padding: 1rem;
        max-width: 100%;
        margin: 0 auto;
    }

    .checkout-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .checkout-right {
        width: 100%;
        position: static;
        margin: 0 auto;
    }

    .checkout-section {
        margin: 0 auto;
        width: 100%;
    }

    .order-item {
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .product-details {
        width: 100%;
        align-items: center;
    }

    .item-total-container {
        justify-content: center;
    }
}

/* Adjust button styles */
.btn.full-width {
    width: 100%;
    justify-content: center;
    margin-top: 1rem;
    padding: 1rem;
    font-size: 1.1rem;
}

/* Update existing styles */
.address-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
    margin-bottom: 1rem;
}

.payment-options {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

/* Order Summary Styles */
.order-item:last-child {
    border-bottom: none;
}

.product-image-container {
    flex: 0 0 120px;
}

.product-details {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
}

.product-name {
    font-size: 1.1rem;
    font-weight: 600;
    color: #2c3e50;
    margin: 0;
}

.product-specs {
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: #666;
    font-size: 0.95rem;
    margin: 0.5rem 0;
}

.current-price {
    font-weight: 600;
    color: #2c3e50;
    font-size: 1.1rem;
}

.item-total-container {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    font-weight: 500;
    color: #2c3e50;
}

/* Price Breakdown Styles */
.price-breakdown {
    margin-top: 2rem;
    padding: 1.5rem;
    border-top: 2px dashed #eee;
    background: #f8f9fa;
    border-radius: 8px;
}

.summary-item {
    display: flex;
    justify-content: space-between;
    padding: 0.8rem 0;
    color: #2c3e50;
    font-size: 1rem;
    border-bottom: 1px solid #eee;
}

.summary-item:last-child {
    border-bottom: none;
}

.summary-item.total {
    font-size: 1.2rem;
    font-weight: 600;
    color: #2c3e50;
    border-top: 2px solid #eee;
    margin-top: 0.5rem;
    padding-top: 1rem;
    border-bottom: none;
}

.amount {
    font-weight: 500;
    color: #2c3e50;
}

/* Place Order Button */
.btn.full-width {
    margin-top: 1.5rem;
    padding: 1rem;
    font-size: 1.1rem;
    font-weight: 600;
    gap: 0.8rem;
}

/* Remove arrows from number input */
.qty-input::-webkit-outer-spin-button,
.qty-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.qty-input {
    -moz-appearance: textfield;
}

/* Animation styles for smooth removal */
.order-item {
    transition: all 0.3s ease;
}

.order-item.removing {
    opacity: 0;
    transform: translateX(100px);
    height: 0;
    padding: 0;
    margin: 0;
    overflow: hidden;
}

.delete-btn {
    background: none;
    border: none;
    color: #dc3545;
    cursor: pointer;
    padding: 4px;
    font-size: 1rem;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.7;
}

.delete-btn:hover {
    opacity: 1;
    transform: scale(1.1);
}

.out-of-stock-message {
    color: #dc3545;
    font-size: 0.9rem;
    font-weight: 500;
    margin-top: 0.5rem;
    padding: 0.5rem;
    background-color: rgba(220, 53, 69, 0.1);
    border-radius: 4px;
    text-align: center;
}

/* Coupon Section Styles */
.coupon-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.coupon-input {
    display: flex;
    gap: 1rem;
}

.coupon-input .form-input {
    flex: 1;
}

.coupon-input .btn {
    white-space: nowrap;
}

.available-coupons h3 {
    font-size: 1.1rem;
    margin-bottom: 1rem;
    color: #2c3e50;
}

.coupon-list {
    display: flex;
    gap: 0.8rem;
    overflow-x: auto;
    padding: 0.3rem 0;
    scrollbar-width: thin;
    -webkit-overflow-scrolling: touch;
}

/* Hide scrollbar for Chrome, Safari and Opera */
.coupon-list::-webkit-scrollbar {
    height: 4px;
}

.coupon-list::-webkit-scrollbar-track {
    background: #f1f1f1;
}

.coupon-list::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 4px;
}

/* Make coupon cards more compact */
.coupon-card {
    flex: 0 0 160px; /* Reduced from 200px */
    height: 100px; /* Reduced from 200px */
    border: 1px dashed #2874f0;
    border-radius: 6px;
    padding: 0.6rem;
    cursor: pointer;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    transform: translateZ(0); /* GPU acceleration */
    will-change: transform, box-shadow, background-color, border-color;
    background: #f8f9fa;
    display: grid;
    grid-template-rows: auto auto;
    gap: 0.3rem;
}

.coupon-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 0.3rem;
}

.coupon-code {
    font-weight: 600;
    color: #2874f0;
    font-size: 0.9rem;
    transition: color 0.2s cubic-bezier(0.4, 0, 0.2, 1),
                text-shadow 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    text-shadow: 0 0 0 transparent;
    backface-visibility: hidden; /* GPU acceleration */
}

.coupon-discount {
    background: #2874f0;
    color: white;
    padding: 0.2rem 0.4rem;
    border-radius: 3px;
    font-size: 0.8rem;
    font-weight: 500;
    transition: background-color 0.2s cubic-bezier(0.4, 0, 0.2, 1),
                text-shadow 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    text-shadow: 0 0 0 transparent;
    backface-visibility: hidden; /* GPU acceleration */
}

.coupon-details {
    display: flex;
    flex-direction: column;
    gap: 0.2rem;
}

.coupon-details p {
    margin: 0;
    color: #666;
    font-size: 0.7rem;
    line-height: 1.2;
}

.coupon-terms {
    color: #2c3e50 !important;
    font-weight: 500;
}

.coupon-expiry {
    color: #dc3545 !important;
}

.coupon-card.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    border: 1px dashed #ccc;
    background: #f1f1f1;
}

.coupon-card.disabled .coupon-code,
.coupon-card.disabled .coupon-discount {
    color: #666;
}

.coupon-card.disabled .coupon-discount {
    background: #999;
}

.coupon-card.active {
    cursor: pointer;
}

.coupon-card.active:hover {

    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}






.coupon-card {
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    transform: translateZ(0);
    will-change: background-color, border-color;
    border: 2px solid transparent; /* Add transparent border by default */
    padding: 0.6rem;
}

.coupon-card.selected {
    border: 2px solid #2874f0;
    background: #f0f8ff;
}

/* Remove all other transition effects */
.coupon-code, 
.coupon-discount {
    transition: none;
}

/* Add these new styles */
.wallet-error {
    color: #dc3545;
    font-size: 0.9rem;
    margin-top: 0.5rem;
    padding: 0.5rem;
    background-color: rgba(220, 53, 69, 0.1);
    border-radius: 4px;
}

.payment-option[data-disabled="true"] {
    opacity: 0.6;
    cursor: not-allowed;
}

.payment-option[data-disabled="true"] input {
    pointer-events: none;
}
</style>
    </head>
<body>
    <div class="checkout-container">
        <div class="checkout-grid">
            <!-- Left Column: Address and Payment -->
            <div class="checkout-left">
                <!-- Address Section -->
                <div class="checkout-section" id="addressSection">
                    <h2>Delivery Address</h2>
                    <div class="address-grid">
                        <% addresses.forEach((address, index) => { %>
                            <div class="address-card <%= index === 0 ? 'selected-address' : '' %>" 
                                 data-address-id="<%= address._id %>" 
                                 onclick="selectAddress(this, '<%= address._id %>')">
                                <i class="fas fa-edit edit-icon" onclick="showEditModal(event, '<%= address._id %>')"></i>
                                <h3><%= address.street %></h3>
                                <p><%= address.city %>, <%= address.state %></p>
                                <p><%= address.country %>, <%= address.postalCode %></p>
                                <p>Phone: <%= address.phone %></p>
                            </div>
                        <% }); %>
                    </div>
                    <button class="btn" onclick="showAddressModal()">
                        <i class="fas fa-plus"></i>
                        Add New Address
                    </button>
                </div>

                <!-- Coupon Section -->
                <div class="checkout-section" id="couponSection">
                    <h2>Available Coupons</h2>
                    <div class="coupon-list">
                        <% coupons.forEach(coupon => { %>
                            <% if (coupon.list) { %>
                                <div class="coupon-card <%= total >= coupon.minPurchase ? 'active' : 'disabled' %>" 
                                     data-coupon-id="<%= coupon._id %>"
                                     onclick="<%= total >= coupon.minPurchase ? `selectCoupon('${coupon._id}')` : '' %>"
                                     data-min-purchase="<%= coupon.minPurchase %>">
                                    <div class="coupon-header">
                                        <span class="coupon-code"><%= coupon.code %></span>
                                        <span class="coupon-discount"><%= coupon.discountValue %> OFF</span>
                                    </div>
                                    <div class="coupon-details">
                                        <p>Special discount for all</p>
                                        <p class="coupon-terms">Min: ₹<%= coupon.minPurchase %></p>
                                        <p class="coupon-expiry">Exp: <%= new Date(coupon.endDate).toLocaleDateString() %></p>
                                    </div>
                                </div>
                            <% } %>
                        <% }); %>
                    </div>
                </div>

                <!-- Payment Section -->
                <div class="checkout-section" id="paymentSection">
                    <h2>Payment Method</h2>
                    <div class="payment-options">
                        <!-- Add Wallet Option -->
                        <div class="payment-option" onclick="togglePayment(this)">
                            <label>
                                <input type="radio" name="payment" value="wallet">
                                <i class="fas fa-wallet"></i>
                                Wallet Balance (₹<%= walletbalance %>)
                            </label>
                            <div class="payment-fields">
                                <% if (walletbalance < total) { %>
                                    <p class="wallet-error">Insufficient wallet balance</p>
                                <% } %>
                            </div>
                        </div>

                        <!-- Existing payment options -->
                        <div class="payment-option" onclick="togglePayment(this)">
                            <label>
                                <input type="radio" name="payment" value="cod">
                                <i class="fas fa-money-bill-wave"></i>
                                Cash on Delivery
                            </label>
                        </div>
                        
                        <div class="payment-option" onclick="togglePayment(this)">
                            <label>
                                <input type="radio" name="payment" value="card">
                                <i class="fas fa-credit-card"></i>
                                Credit/Debit Card
                            </label>
                            <div class="payment-fields">
                                <input type="text" placeholder="Card Number" class="form-input full-width">
                                <div style="display: flex; gap: 1rem; margin-top: 1rem;">
                                    <input type="text" placeholder="MM/YY" class="form-input half-width">
                                    <input type="text" placeholder="CVV" class="form-input half-width">
                                </div>
                            </div>
                        </div>

                        <div class="payment-option" onclick="togglePayment(this)">
                            <label>
                                <input type="radio" name="payment" value="upi">
                                <i class="fas fa-mobile-alt"></i>
                                UPI Payment
                            </label>
                            <div class="payment-fields">
                                <input type="text" placeholder="UPI ID" class="form-input full-width">
                            </div>
                        </div>

                        <!-- Add Razorpay option -->
                        <div class="payment-option" onclick="togglePayment(this)">
                            <label>
                                <input type="radio" name="payment" value="razorpay">
                                <i class="fas fa-credit-card"></i>
                                Razorpay
                            </label>
                        </div>
                    </div>

                    <!-- Add error message and action buttons -->
                    <div class="payment-error" id="paymentError">
                        Please select a payment method
                    </div>
                </div>
            </div>

            <!-- Right Column: Order Summary -->
            <div class="checkout-right">
                <div class="checkout-section" id="orderSummary">
                    <h2>Order Summary</h2>
                    <div class="order-items">
                        <% products.forEach(product => { %>
                            <div class="order-item">
                                <div class="product-image-container">
                                    <img src="<%= product.images[0] %>" class="product-image" alt="<%= product.name %>">
                                </div>
                                <div class="product-details">
                                    <div class="product-header">
                                        <h3 class="product-name"><%= product.name %></h3>
                                        <button class="delete-btn" onclick="removeProduct(this, '<%= product._id %>')">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>
                                    <div class="product-specs">
                                        <span>Color: <%= product.color %></span>
                                        <span>Size: <%= product.size %></span>
                                    </div>
                                    <div class="quantity-control">
                                        <button class="qty-btn minus" onclick="adjustQuantity(this, -1)">
                                            <i class="fas fa-minus"></i>
                                        </button>
                                        <span class="qty-display" 
                                            data-price="<%= product.price %>"
                                            data-product-id="<%= product._id %>"
                                            data-offer="<%= product.offer%>"><%=product.quantity%></span>
                                        <button class="qty-btn plus" onclick="adjustQuantity(this, 1,'<%= product.count %>')">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    </div>
                                    <div class="item-total-container">
                                        <span>Item Total:</span>
                                        <span class="item-total">₹<%= product.price %></span>
                                    </div>
                                    <div class="out-of-stock-message" style="display: none;">
                                        Out of stock - Remove this product to proceed
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                    
                    <div class="price-breakdown">
                        <div class="summary-item">
                            <span>Subtotal (<span class="item-count"><%= products.length %></span> items)</span>
                            <span class="amount">₹<span class="subtotal-value"><%= subtotal %></span></span>
                        </div>
                        <div class="summary-item">
                            <span>Delivery Fee</span>
                            <span class="amount">₹<span class="delivery-fee"><%= deliveryFee %></span></span>
                        </div>
                        <div class="summary-item">
                            <span>Discount Applied</span>
                            <span class="amount">-₹<span class="discount-value"><%= discount %></span></span>
                        </div>
                        <div class="summary-item coupon-line" style="display: none;">
                            <span>Coupon Discount</span>
                            <span class="amount">-₹<span class="coupon-discount-value">0</span></span>
                        </div>
                        <div class="summary-item total">
                            <span>Total Amount</span>
                            <span class="amount">₹<span class="total-value"><%= total %></span></span>
                        </div>
                    </div>

                    <button class="btn full-width" onclick="placeOrder('<%= from %>')">
                        <i class="fas fa-shopping-bag"></i>
                        Place Order
                    </button>
                </div>
            </div>
        </div>

        <!-- Address Modal -->
        <div class="add-address-modal" id="addressModal">
            <div class="modal-content">
                <h2>Add New Address</h2>
                <form id="addressForm" >
                    <div class="form-group">
                        <input type="text" name="street" placeholder="Street Address" class="form-input" required>
                    </div>
                    <div class="form-group">
                        <input type="text" name="city" placeholder="City" class="form-input" required>
                    </div>
                    <div class="form-group">
                        <input type="text" name="state" placeholder="State" class="form-input" required>
                    </div>
                    <div class="form-group">
                        <input type="text" name="country" placeholder="Country" class="form-input" required>
                    </div>
                    <div class="form-group">
                        <input type="text" name="postalCode" placeholder="Postal Code" class="form-input" required>
                    </div>
                    <div class="form-group">
                        <input type="tel" name="phone" placeholder="Phone Number" class="form-input" required>
                    </div>
                    <div class="action-btns">
                        <button type="button" class="btn" onclick="closeAddressModal()">
                            <i class="fas fa-times"></i>
                            Cancel
                        </button>
                        <button type="submit" class="btn">
                            <i class="fas fa-save"></i>
                            Save Address
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Add Razorpay SDK before closing body tag -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
        let selectedAddressId = '<%= addresses[0]?.id %>'; // Initialize with first address ID

function selectAddress(element, addressId) {
    // Remove selection from all addresses
    document.querySelectorAll('.address-card').forEach(card => {
        card.classList.remove('selected-address');
    });
    
    // Add selection to clicked address
    element.classList.add('selected-address');
    
    // Update selected address ID
    selectedAddressId = addressId;
    console.log('Selected Address ID:', selectedAddressId);
}

// Modify edit function to handle correct address
function showEditModal(event, addressId) {
    event.stopPropagation(); // Prevent address selection when clicking edit
    // Your edit modal logic here, using addressId
    document.getElementById('addressModal').style.display = 'block';
}


// Add these new functions
        function showEditModal() {
            // You can add logic to populate existing address data here
            document.getElementById('addressModal').style.display = 'block';
        }

        // Modified togglePayment function
        function togglePayment(option) {
    // Check if option is disabled
    if (option.getAttribute('data-disabled') === 'true') {
        return;
    }

    const allOptions = document.querySelectorAll('.payment-option');
    allOptions.forEach(opt => {
        opt.classList.remove('active');
        const fields = opt.querySelector('.payment-fields');
        if (fields) {
            fields.style.maxHeight = '0';
        }
    });
    
    option.classList.add('active');
    const fields = option.querySelector('.payment-fields');
    if (fields) {
        fields.style.maxHeight = fields.scrollHeight + 'px';
    }
    
    selectedPaymentMethod = option.querySelector('input').value;
    document.getElementById('paymentError').style.display = 'none';
}
        // Update existing closeAddressModal function
        function closeAddressModal() {
            document.getElementById('addressModal').style.display = 'none';
            // Reset form if needed
            document.getElementById('addressForm').reset();
        }

        let currentSection = 'addressSection';

        function nextSection(nextId) {
    // Validate payment section before proceeding to review
    if (currentSection === 'paymentSection' && nextId === 'reviewSection') {
        const paymentSelected = document.querySelector('input[name="payment"]:checked');
        if (!paymentSelected) {
            document.getElementById('paymentError').style.display = 'block';
            return;
        }
    }

    document.getElementById(currentSection).classList.remove('active-section');
    document.getElementById(nextId).classList.add('active-section');
    updateProgress(nextId);
    currentSection = nextId;
    
    // Clear payment error when leaving section
    if (currentSection !== 'paymentSection') {
        document.getElementById('paymentError').style.display = 'none';
    }
}

function prevSection(prevId) {
    document.getElementById(currentSection).classList.remove('active-section');
    document.getElementById(prevId).classList.add('active-section');
    updateProgress(prevId);
    currentSection = prevId;
}

function updateProgress(sectionId) {
    const steps = document.querySelectorAll('.progress-step');
    steps.forEach((step, index) => {
        step.classList.remove('active-step');
        if((sectionId === 'addressSection' && index === 0) ||
           (sectionId === 'paymentSection' && index === 1) ||
           (sectionId === 'reviewSection' && index === 2)) {
            step.classList.add('active-step');
        }
    });
}

function showAddressModal() {
    document.getElementById('addressModal').style.display = 'block';
}

function closeAddressModal() {
    document.getElementById('addressModal').style.display = 'none';
}
let selectedPaymentMethod = null;
function togglePayment(option) {
    // Check if option is disabled
    if (option.getAttribute('data-disabled') === 'true') {
        return;
    }

    const allOptions = document.querySelectorAll('.payment-option');
    allOptions.forEach(opt => {
        opt.classList.remove('active');
        const fields = opt.querySelector('.payment-fields');
        if (fields) {
            fields.style.maxHeight = '0';
        }
    });
    
    option.classList.add('active');
    const fields = option.querySelector('.payment-fields');
    if (fields) {
        fields.style.maxHeight = fields.scrollHeight + 'px';
    }
    
    selectedPaymentMethod = option.querySelector('input').value;
    document.getElementById('paymentError').style.display = 'none';
}

// Update the placeOrder function to collect product data including offers
async function placeOrder(from) {
    if (!selectedAddressId) {
        alert('Please select a delivery address!');
        return;
    }
    
    if (!selectedPaymentMethod) {
        document.getElementById('paymentError').style.display = 'block';
        return;
    }

    // Handle different payment methods
    if (selectedPaymentMethod === "razorpay") {
        const totalAmount = parseFloat(document.querySelector('.total-value').textContent) * 100;
        let status = await razorpay(totalAmount);
        if (!status) {
            alert("Payment failed");
            return;
        }
    } else if (selectedPaymentMethod === "wallet") {
        const walletBalance = parseFloat('<%= walletbalance %>');
        const totalAmount = parseFloat(document.querySelector('.total-value').textContent);
       
        if (walletBalance < totalAmount) {
            alert("Insufficient wallet balance");
            return;
        }
    }

    // Hide all out-of-stock messages first
    document.querySelectorAll('.out-of-stock-message').forEach(msg => {
        msg.style.display = 'none';
    });

    // Collect product data with offers, color, and size
    const products = Array.from(document.querySelectorAll('.order-item')).map(item => {

        const qtyDisplay = item.querySelector('.qty-display');
        const productSpecs = item.querySelector('.product-specs');
        
        // Extract color and size from product specs
        const color = productSpecs.querySelector('span:nth-child(1)').textContent.replace('Color: ', '');
        const size = productSpecs.querySelector('span:nth-child(2)').textContent.replace('Size: ', '');
        
        return {
            productId: qtyDisplay.dataset.productId,
            quantity: parseInt(qtyDisplay.textContent),
            price: parseFloat(qtyDisplay.dataset.price),
            offer: parseInt(qtyDisplay.dataset.offer || 0),
            color: color,
            size: size
        };
    });

    
    // Get totals
    const totalAmount = parseFloat(document.querySelector('.total-value').textContent);
    const subtotal = parseFloat(document.querySelector('.subtotal-value').textContent);
    const deliveryFee = parseFloat(document.querySelector('.delivery-fee').textContent);
    const discount = parseFloat(document.querySelector('.discount-value').textContent);

    try {
        const response = await fetch('/user/placeOrder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                coupon: coupon,
                from: from,
                addressId: selectedAddressId,
                paymentMethod: selectedPaymentMethod,
                products: products,
                totals: {
                    subtotal: subtotal,
                    delivery: deliveryFee,
                    discount: discount,
                    total: totalAmount
                }
            })
        });

        

        if (response.ok) {
            fetch('/user/updatewallet',{
                method:'POST',
                headers:{
                    'Content-Type':'application/json'
                },
                body:JSON.stringify({
                    amount:totalAmount,
                    type:'debit'
                })
            })
            const html = await response.text();
            document.documentElement.innerHTML = html; // Assuming your success response includes a redirect URL
        } else {
            const result = await response.json();
            if (result.stockIssue) {
                // Show out-of-stock message for the specific product
                const productElement = document.querySelector(`[data-product-id="${result.productId}"]`);
                if (productElement) {
                    const outOfStockMessage = productElement.closest('.order-item').querySelector('.out-of-stock-message');
                    if (outOfStockMessage) {
                        outOfStockMessage.style.display = 'block';
                    }
                }
            } else {
                alert('Order failed: ' + (result.error || 'Unknown error'));
            }
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Failed to place order. Please try again.');
    }
}
function saveAddress(e) {
    e.preventDefault();
    closeAddressModal();
    // Add address saving logic here
}

// Close modal when clicking outside
window.onclick = function(event) {
    const modal = document.getElementById('addressModal');
    if(event.target == modal) {
        closeAddressModal();
    }
}

document.getElementById('addressForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData.entries());

    try {
        const response = await fetch('/user/adresss', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
            credentials: 'include'
        });

        const result = await response.json();
        console.log(result);
        if (result.status=="success") {
            // Update to add the new address to the address-grid container
            const addressGrid = document.querySelector('.address-grid');
            const newAddress = createAddressElement(result.address);
            addressGrid.appendChild(newAddress);
            closeAddressModal();
        } else {
            alert('Error adding address: ' + (result.error || 'Unknown error'));
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Failed to add address. Please try again.');
    }
});
function createAddressElement(address) {
    const div = document.createElement('div');
    div.className = 'address-card';
    div.setAttribute('data-address-id', address._id);
    
    div.innerHTML = `
        <i class="fas fa-edit edit-icon" onclick="showEditModal(event, '${address._id}')"></i>
        <h3>${address.street}</h3>
        <p>${address.city}, ${address.state}</p>
        <p>${address.country}, ${address.postalCode}</p>
        <p>Phone: ${address.phone}</p>
    `;
    
    div.addEventListener('click', function() {
        selectAddress(this, address._id);
    });
    
    return div;
}
function adjustQuantity(button, change, max) {
    const qtyDisplay = button.parentElement.querySelector('.qty-display');
    const currentQty = parseInt(qtyDisplay.textContent);
    if(max){
        if(parseInt(max)<=currentQty || currentQty>=5){
            return
        }
    }
    const newQty = Math.max(1, currentQty + change); // Ensure minimum is 1
    qtyDisplay.textContent = newQty;
    updateQuantity(qtyDisplay);
}

function updateQuantity(element) {
    const price = parseFloat(element.dataset.price);
    const quantity = parseInt(element.textContent);
    const itemTotal = element.parentElement.parentElement.querySelector('.item-total');
    const total = price * quantity;
    // Format number to remove .00
    itemTotal.textContent = '₹' + (total % 1 === 0 ? total : total.toFixed(2));
    
    updateOrderSummary();
}

function updateOrderSummary() {
    let subtotal = 0;
    let productDiscount = 0;
    let couponDiscount = 0;
    let deliveryFee = 0;
    
    // Calculate product subtotal, offers discount, and delivery fee
    document.querySelectorAll('.qty-display').forEach(display => {
        const price = parseFloat(display.dataset.price);
        const quantity = parseInt(display.textContent);
        const offer = parseFloat(display.dataset.offer) || 0;
        
        const itemSubtotal = price * quantity;
        subtotal += itemSubtotal;
        
        // Calculate product discount
        if (offer > 0) {
            productDiscount += (itemSubtotal * (offer / 100));
        }
        
        // Calculate delivery fee per product
        const discountedPrice = itemSubtotal * (1 - (offer / 100));
        if (discountedPrice < 500) {
            deliveryFee += 40 * quantity;
        }
    });

    // Update subtotal display
    const subtotalElement = document.querySelector('.subtotal-value');
    subtotalElement.textContent = Math.round(subtotal);
    
    // Update delivery fee display
    const deliveryFeeElement = document.querySelector('.delivery-fee');
    deliveryFeeElement.textContent = Math.round(deliveryFee);
    
    // Calculate subtotal after delivery
    const subtotalAfterDelivery = subtotal + deliveryFee;
    
    // Check if current total meets coupon minimum requirement
    if (coupon) {
        const selectedCouponCard = document.querySelector('.coupon-card.selected');
        if (selectedCouponCard) {
            const minPurchase = parseFloat(selectedCouponCard.dataset.minPurchase);
            if (subtotalAfterDelivery < minPurchase) {
                // Deselect coupon if total falls below minimum
                selectedCouponCard.classList.remove('selected');
                coupon = null;
                document.querySelector('.coupon-line').style.display = 'none';
            } else {
                // Apply coupon discount if minimum is met
                const discountText = selectedCouponCard.querySelector('.coupon-discount').textContent;
                const discountAmount = parseFloat(discountText.replace(' OFF', ''));
                couponDiscount = discountAmount;
                
                // Show and update coupon line
                document.querySelector('.coupon-line').style.display = 'flex';
                document.querySelector('.coupon-discount-value').textContent = Math.round(couponDiscount);
            }
        }
    }
    
    // Update product discount display
    const discountElement = document.querySelector('.discount-value');
    discountElement.textContent = Math.round(productDiscount);
    
    // Calculate final total
    const total = subtotalAfterDelivery - productDiscount - couponDiscount;
    const totalElement = document.querySelector('.total-value');
    totalElement.textContent = Math.round(total);

    // Update coupon card states based on new total
    updateCouponCardStates(subtotalAfterDelivery);
}

function updateCouponCardStates(total) {
    document.querySelectorAll('.coupon-card').forEach(card => {
        const minPurchase = parseFloat(card.dataset.minPurchase);
        
        if (total >= minPurchase) {
            card.classList.remove('disabled');
            card.classList.add('active');
            card.setAttribute('onclick', `selectCoupon('${card.getAttribute('data-coupon-id')}')`);
        } else {
            card.classList.remove('active');
            card.classList.add('disabled');
            card.removeAttribute('onclick');
        }
    });
}

function selectCoupon(id) {
    console.log(id);
    // Find the coupon card with the matching id directly
    const couponCard = document.querySelector(`.coupon-card[data-coupon-id="${id}"]`);
    console.log(couponCard);
    // If this coupon is already selected, deselect it
    if (couponCard && couponCard.classList.contains('selected')) {
        couponCard.classList.remove('selected');
        coupon = null;
        // Update order summary to remove coupon discount
        updateOrderSummary();
        return;
    }
    
    // Remove selection from all coupons
    document.querySelectorAll('.coupon-card').forEach(card => {
        card.classList.remove('selected');
    });
    
    // Select the new coupon if it exists and is not disabled
    if (couponCard && !couponCard.classList.contains('disabled')) {
        couponCard.classList.add('selected');
        coupon = id;
        // Update order summary to reflect the applied coupon
        updateOrderSummary();
    }
}

let coupon=null;

function removeProduct(button, productId) {
    const orderItem = button.closest('.order-item');
    
    // Add removing animation
    orderItem.classList.add('removing');
    
    // Wait for animation to complete before removing the element
    setTimeout(() => {
        orderItem.remove();
        
        // Update item count
        const itemCount = document.querySelector('.item-count');
        itemCount.textContent = document.querySelectorAll('.order-item').length;
        
        // Update order summary
        updateOrderSummary();
        
        // If no items left, redirect to cart or show empty state
        if (document.querySelectorAll('.order-item').length === 0) {
            window.location.href = '/user/cart';
        }
    }, 300); // Match this with your CSS animation duration
}

document.addEventListener('DOMContentLoaded', function() {
    // Get initial total amount
    const initialTotal = parseFloat(document.querySelector('.total-value').textContent);
    
    // Initialize coupon card states with initial total
    updateCouponCardStates(initialTotal);

    // Select the first address by default
    const firstAddress = document.querySelector('.address-card');
    if (firstAddress) {
        const addressId = firstAddress.getAttribute('data-address-id');
        console.log('Initial address ID:', addressId); // For debugging
        selectAddress(firstAddress, addressId);
    }

    // Disable wallet option if balance is insufficient
    const walletOption = document.querySelector('.payment-option input[value="wallet"]').closest('.payment-option');
    const walletBalance = parseFloat('<%= walletbalance %>');
    const totalAmount = parseFloat(document.querySelector('.total-value').textContent);
    
    if (walletBalance < totalAmount) {
        walletOption.setAttribute('data-disabled', 'true');
    }
});

async function razorpay(total){
      return new Promise((resolve, reject) => {
        var options = {
            key: "rzp_test_PdAFPaTa6RKOxW", 
            amount: total, 
            currency: "INR",
            name: "Your Company Name",
            description: "Test Transaction",
            handler: function (response) {
                if (response.razorpay_payment_id) {
                    resolve(true);
                } else {
                    resolve(false);
                }
            },
            "prefill": {
                "name": "Your Name",
                "email": "you@example.com",
                "contact": "9999999999"
            },
            "theme": {
                "color": "#3399cc"
            }
        };
        var rzp = new Razorpay(options);
        rzp.open();
    });
}

    </script>
</body>
</html>







